<!DOCTYPE html>
<html lang="{{ global.lang }}">
  <head>
    <script defer data-domain="tom.so" src="https://plausible.io/js/script.js"></script>
    <script defer src="/_vercel/insights/script.js"></script>
    <script src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title ~ ' – ' ~ global.title if title else global.title }}</title>
    <meta property="og:image" content="https://tom.so/media/og.png">
    <meta name="description" content="Tom Hackshaw is a school teacher and designer from Hokkaido, Japan. Currently based in Tāmaki Makaurau, Aotearoa.">
    <link rel="stylesheet" href="{{ '/css/index.css' | url }}">
    <link rel="icon" href="/media/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="/media/favicon.ico" type="image/x-icon"/>
    {% include 'snippets/meta.njk' %}
  </head>
  <body>
  
    <header class="site-header">
      <h1 class="site-name">
        <a href="{{ '/' | url }}">{{ global.title }}</a>
      </h1>
      <nav class="site-nav" >
        <input type="checkbox" class="hamburger-checkbox" id="hamburger-checkbox" />
        <label class="hamburger" for="hamburger-checkbox" aria-label="Toggle menu">
      <span class="hamburger-icon">Menu</span>
      <span class="close-icon" aria-hidden="true">Close</span>
    </label>
        <ul>
         <li><a href="/work">Work</a></li>
         <li><a href="/experiments">Experiments</a></li>
         <li><a href="/posts">Writing</a></li>
         <li><a href="/about">About</a></li>
         <li><a href="/contact">Contact</a></li>
        </ul>
      </nav>
    </header>
    
  </nav>
</header>

    <br><br><br><br>

    <main class="site-main">
      {{ content | safe }}
    </main>

    {% if global.footer %}
      <footer class="site-footer">
        <p>{{ global.footer | markdownifyInline | safe }}</p>
        <a rel="me" aria-hidden="true" href="https://merveilles.town/@tomupom" alt="Referral link to Merveilles, a Mastodon instance I am a member of"></a>
      </footer>
    {% endif %}
    
    <script>
  if (window.netlifyIdentity) {
    window.netlifyIdentity.on("init", user => {
      if (!user) {
        window.netlifyIdentity.on("login", () => {
          document.location.href = "/admin/";
        });
      }
    });
  }
</script>

<script>
// Create a grid
let grid = new Array(75);
for (let i = 0; i < grid.length; i++) {
  grid[i] = new Array(40);
}

// Initialize the grid
for (let i = 0; i < grid.length; i++) {
  for (let j = 0; j < grid[i].length; j++) {
      grid[i][j] = Math.random() < 0.5;
  }
}

// Function to count alive neighbors
function countAliveNeighbors(grid, x, y) {
  let count = 0;
  for (let i = -1; i <= 1; i++) {
      for (let j = -1; j <= 1; j++) {
          if (i === 0 && j === 0) continue;
          let newX = x + i;
          let newY = y + j;
          if (newX >= 0 && newX < grid.length && newY >= 0 && newY < grid[newX].length && grid[newX][newY]) {
              count++;
          }
      }
  }
  return count;
}

// Function to get the next state of a cell
function getNextState(grid, x, y) {
  let aliveNeighbors = countAliveNeighbors(grid, x, y);
  if (grid[x][y] && (aliveNeighbors === 2 || aliveNeighbors === 3)) {
      return true;
  } else if (!grid[x][y] && aliveNeighbors === 3) {
      return true;
  } else {
      return false;
  }
}

// Render the grid on a canvas
let canvas = document.getElementById('gameCanvas');
let container = document.querySelector('.game-container');
let context = canvas.getContext('2d');
let cellSize = 10;

// Set the size of the canvas to the size of the container
canvas.width = container.clientWidth;
canvas.height = container.clientHeight;

for (let i = 0; i < grid.length; i++) {
  for (let j = 0; j < grid[i].length; j++) {
      if (grid[i][j]) {
          context.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);
      }
  }
}

// Update the size of the canvas whenever the window is resized
window.addEventListener('resize', () => {
  canvas.width = container.clientWidth;
  canvas.height = container.clientHeight;
});

// Update the grid and re-render
setInterval(() => {
  let nextGrid = new Array(75);
  for (let i = 0; i < nextGrid.length; i++) {
      nextGrid[i] = new Array(40);
      for (let j = 0; j < nextGrid[i].length; j++) {
          nextGrid[i][j] = getNextState(grid, i, j);
      }
  }
  grid = nextGrid;
  context.clearRect(0, 0, canvas.width, canvas.height);
  for (let i = 0; i < grid.length; i++) {
      for (let j = 0; j < grid[i].length; j++) {
          if (grid[i][j]) {
              context.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);
          }
      }
  }
}, 100);
</script>

  </body>
</html>
